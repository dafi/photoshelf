apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')

    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:recyclerview-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:design:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:cardview-v7:${rootProject.ext.supportLibVersion}"

    implementation "com.google.android:flexbox:${rootProject.ext.flexboxLibVersion}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "io.reactivex.rxjava2:rxjava:${rootProject.ext.rxjavaLibVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${rootProject.ext.rxandroidLibVersion}"

    implementation "com.dropbox.core:dropbox-core-sdk:${rootProject.ext.dropboxCoreLibVersion}"

    implementation "org.greenrobot:eventbus:${rootProject.ext.eventbusLibVersion}"
    implementation "com.github.scribejava:scribejava-core:${rootProject.ext.scribejavaCoreLibVersion}"
    implementation "net.danlew:android.joda:${rootProject.ext.jodaLibVersion}"
    implementation "com.takisoft.fix:preference-v7:${rootProject.ext.supportLibVersion}.0"
    implementation "com.squareup.picasso:picasso:${rootProject.ext.picassoLibVersion}"

    implementation "com.ternaryop:utils:${rootProject.ext.ternaryUtilLibVersion}"

    testImplementation "junit:junit:${rootProject.ext.junitLibVersion}"
    androidTestImplementation "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    androidTestImplementation "com.android.support.test:rules:${rootProject.ext.rulesLibVersion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${rootProject.ext.espressoCcoreLibVersion}"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            def keystoreFile = new File("$rootDir/app/build-keystore.properties")
            if (keystoreFile.exists()) {
                def props = new Properties()
                props.load(new FileInputStream(keystoreFile))
                storeFile file(props.get("key.store"))
                storePassword props.get("key.store.password")
                keyAlias props.get("key.alias")
                keyPassword props.get("key.alias.password")
            }
        }
    }

    defaultConfig {
        applicationId "com.ternaryop.photoshelf"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled true
        versionCode versionCodeByTask()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }

    // Workaround for "Method ... not mocked." in test cases
    testOptions {
        unitTests.returnDefaultValues = true
    }

    // Needed by dropbox
    // see http://stackoverflow.com/questions/31912459/duplicate-lib-file-copied-in-apk-meta-inf-license-txt-error-in-andorid-studio#31912566
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }
}

task nativeLibsToJar(type: Zip) {
    destinationDir file("$buildDir/native-libs")
    baseName 'native-libs'
    extension 'jar'
    from fileTree(dir: 'libs', include: '**/*.so')
    into 'lib/'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn(nativeLibsToJar)
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}
repositories {
    mavenCentral()
}

def versionCodeByTask() {
    def props = new Properties()
    def versionFile = new File("$rootDir/app/version.properties")
    def versionCode = 0
    if (versionFile.exists()) {
        props.load(new FileReader(versionFile))
        versionCode = props["versionCode"]?.isInteger() ? props["versionCode"].toInteger() : 0
    }

    // Increment the versionCode only for specific tasks (eg the assemble release tasks)
    def runTasks = gradle.startParameter.taskNames
    def incrementableTaskNames = ["aR", "assembleRelease"]
    if (incrementableTaskNames.find {name -> name in runTasks}) {
        ++versionCode
        props["versionCode"] = versionCode.toString()
        props.store(new FileWriter(versionFile), null)
    }
    return versionCode
}

apply from: 'appconfig.gradle'
