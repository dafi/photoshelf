apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.appcompat:appcompat:${rootProject.ext.androidXAppCompatLibVersion}"
    implementation "androidx.recyclerview:recyclerview:${rootProject.ext.androidXRecyclerviewLibVersion}"
    implementation "androidx.cardview:cardview:${rootProject.ext.androidXCardViewLibVersion}"
    implementation "androidx.constraintlayout:constraintlayout:${rootProject.ext.androidXConstraintlayoutLibVersion}"
    implementation "androidx.preference:preference-ktx:${rootProject.ext.androidXPreferenceLibVersion}"

    implementation "com.google.android.material:material:${rootProject.ext.androidXMaterialLibVersion}"
    implementation "com.google.android:flexbox:${rootProject.ext.flexboxLibVersion}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation "io.reactivex.rxjava2:rxjava:${rootProject.ext.rxjavaLibVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${rootProject.ext.rxandroidLibVersion}"

    implementation "com.dropbox.core:dropbox-core-sdk:${rootProject.ext.dropboxCoreLibVersion}"

    implementation "org.greenrobot:eventbus:${rootProject.ext.eventbusLibVersion}"
    implementation "com.github.scribejava:scribejava-core:${rootProject.ext.scribejavaCoreLibVersion}"

    implementation "com.squareup.picasso:picasso:${rootProject.ext.picassoLibVersion}"
    implementation "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofitLibVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${rootProject.ext.retrofitAdapterRrxjavaLibVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.ext.retrofitConverterGsonLibVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.okhttp3LoggingInterceptorLibVersion}"
    implementation "com.squareup.okio:okio:${rootProject.ext.okio}"

    implementation "com.google.code.gson:gson:${rootProject.ext.gsonLibVersion}"

    implementation "org.jsoup:jsoup:${rootProject.ext.jsoupLibVersion}"

    implementation "com.ternaryop:utils:${rootProject.ext.ternaryUtilLibVersion}"

    testImplementation "junit:junit:${rootProject.ext.junitLibVersion}"
    androidTestImplementation "androidx.annotation:annotation:${rootProject.ext.androidXAnnotationLibVersion}"
    androidTestImplementation "androidx.test:rules:${rootProject.ext.androidXRulesLibVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.ext.androidXEspressoCoreLibVersion}"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            def keystoreFile = new File("$rootDir/app/build-keystore.properties")
            if (keystoreFile.exists()) {
                def props = new Properties()
                props.load(new FileInputStream(keystoreFile))
                storeFile file(props.get("key.store"))
                storePassword props.get("key.store.password")
                keyAlias props.get("key.alias")
                keyPassword props.get("key.alias.password")
            }
        }
    }

    defaultConfig {
        applicationId "com.ternaryop.photoshelf"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled true
        versionCode versionCodeByTask()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            buildConfigField "String" , "PHOTOSHELF_API_PREFIX" , "\"http://visualdiffer.com/image/\""
        }
        debug {
            applicationIdSuffix ".debug"
        }
        debugGenymotion {
            initWith debug
            // used with genymotion
            buildConfigField "String", "PHOTOSHELF_API_PREFIX", "\"http://10.0.3.2:8080/image/\""
        }
        debugRealDevice {
            // use from real devices to access to local network
            initWith debug
            buildConfigField "String", "PHOTOSHELF_API_PREFIX", "\"http://192.168.0.2:8080/image/\""
        }
        debugAndroidEmulator {
            // used with android emulator
            initWith debug
            buildConfigField "String", "PHOTOSHELF_API_PREFIX", "\"http://10.0.2.2:8080/image/\""
        }
    }

    variantFilter { variant ->
        // Must be used a more specific debug variant (eg debugGenymotion, debugAndroidEmulator, ...)
        if (variant.buildType.name == "debug") {
            setIgnore(true)
        }
    }

    sourceSets {
        debugGenymotion {
            root = "src/debug"
        }
        debugRealDevice {
            root = "src/debug"
        }
        debugAndroidEmulator {
            root = "src/debug"
        }
    }
    // Workaround for "Method ... not mocked." in test cases
    testOptions {
        unitTests.returnDefaultValues = true
    }

    // Needed by dropbox
    // see http://stackoverflow.com/questions/31912459/duplicate-lib-file-copied-in-apk-meta-inf-license-txt-error-in-andorid-studio#31912566
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }
}

task nativeLibsToJar(type: Zip) {
    destinationDir file("$buildDir/native-libs")
    baseName 'native-libs'
    extension 'jar'
    from fileTree(dir: 'libs', include: '**/*.so')
    into 'lib/'
}

tasks.withType(JavaCompile) {
    compileTask ->
        compileTask.dependsOn(nativeLibsToJar)
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}
repositories {
    mavenCentral()
}

def versionCodeByTask() {
    def props = new Properties()
    def versionFile = new File("$rootDir/app/version.properties")
    def versionCode = 1
    if (versionFile.exists()) {
        props.load(new FileReader(versionFile))
        versionCode = props["versionCode"]?.isInteger() ? props["versionCode"].toInteger() : 1
    }

    // Increment the versionCode only for specific tasks (eg the assemble release tasks)
    def runTasks = gradle.startParameter.taskNames
    def incrementableTaskNames = ["aR", "assembleRelease"]
    if (incrementableTaskNames.any { name -> name in runTasks }) {
        ++versionCode
        props["versionCode"] = versionCode.toString()
        props.store(new FileWriter(versionFile), null)
    }
    return versionCode
}

apply plugin: 'kotlin-android-extensions'
