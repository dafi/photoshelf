apply plugin: 'com.android.application'

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')

    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support:recyclerview-v7:27.0.2'
    implementation 'com.android.support:design:27.0.2'
    implementation 'com.android.support:cardview-v7:27.0.2'

    implementation 'com.google.android:flexbox:0.3.1'

    implementation 'io.reactivex.rxjava2:rxjava:2.1.6'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    implementation 'com.dropbox.core:dropbox-core-sdk:3.0.5'

    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'org.scribe:scribe:1.3.7'
    implementation 'net.danlew:android.joda:2.9.9'

    implementation 'com.ternaryop:utils:1.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support:support-annotations:27.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            def keystoreFile = new File("$rootDir/app/build-keystore.properties")
            if (keystoreFile.exists()) {
                def props = new Properties()
                props.load(new FileInputStream(keystoreFile))
                storeFile file(props.get("key.store"))
                storePassword props.get("key.store.password")
                keyAlias props.get("key.alias")
                keyPassword props.get("key.alias.password")
            }
        }
    }

    defaultConfig {
        applicationId "com.ternaryop.photoshelf"
        minSdkVersion 21
        targetSdkVersion 26
        multiDexEnabled true
        versionCode versionCodeByTask()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }

    // Workaround for "Method ... not mocked." in test cases
    testOptions {
        unitTests.returnDefaultValues = true
    }

    // Needed by dropbox
    // see http://stackoverflow.com/questions/31912459/duplicate-lib-file-copied-in-apk-meta-inf-license-txt-error-in-andorid-studio#31912566
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }
}

task nativeLibsToJar(type: Zip) {
    destinationDir file("$buildDir/native-libs")
    baseName 'native-libs'
    extension 'jar'
    from fileTree(dir: 'libs', include: '**/*.so')
    into 'lib/'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn(nativeLibsToJar)
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

def versionCodeByTask() {
    def props = new Properties()
    def versionFile = new File("$rootDir/app/version.properties")
    def versionCode = 0
    if (versionFile.exists()) {
        props.load(new FileReader(versionFile))
        versionCode = props["versionCode"]?.isInteger() ? props["versionCode"].toInteger() : 0
    }

    // Increment the versionCode only for specific tasks (eg the assemble release tasks)
    def runTasks = gradle.startParameter.taskNames
    def incrementableTaskNames = ["aR", "assembleRelease"]
    if (incrementableTaskNames.find {name -> name in runTasks}) {
        ++versionCode
        props["versionCode"] = versionCode.toString()
        props.store(new FileWriter(versionFile), null)
    }
    return versionCode
}