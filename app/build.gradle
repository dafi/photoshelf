apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$rootProject.projectDir/shared-dependencies.gradle"

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.dropbox.core:dropbox-core-sdk:${rootProject.ext.dropboxCoreLibVersion}"

    implementation "io.github.ternaryop:crash-reporter:${rootProject.ext.ternaryOpCrashReporterLibVersion}"
    implementation "io.github.ternaryop:utils-drawer:${rootProject.ext.ternaryOpDrawerLibVersion}"
    implementation "io.github.ternaryop:domselector-coroutines:${rootProject.ext.ternaryOpDomSelectorCoroutinesLibVersion}"
    implementation "io.github.ternaryop:feedly-coroutines:${rootProject.ext.ternaryOpFeedlyCoroutinesLibVersion}"

    implementation project(path: ':core')
    implementation project(path: ':db')
    implementation project(path: ':home')
    implementation project(path: ':birthday')
    implementation project(path: ':tumblr-dialog')
    implementation project(path: ':tag-navigator')
    implementation project(path: ':tag-photo-browser')
    implementation project(path: ':imageviewer')
    implementation project(path: ':imagepicker')
    implementation project(path: ':feedly')
    implementation project(path: ':tumblr-ui-core')
    implementation project(path: ':tumblr-ui-draft')
    implementation project(path: ':tumblr-ui-schedule')
    implementation project(path: ':tumblr-ui-publish')
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    signingConfigs {
        release {
            def keystoreFile = new File("$rootDir/app/build-keystore.properties")
            if (keystoreFile.exists()) {
                def props = new Properties()
                props.load(new FileInputStream(keystoreFile))
                storeFile file(props.get("key.store"))
                storePassword props.get("key.store.password")
                keyAlias props.get("key.alias")
                keyPassword props.get("key.alias.password")
            }
        }
    }

    defaultConfig {
        applicationId "com.ternaryop.photoshelf"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled true
        versionCode 1
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // default value for android emulator
        buildConfigField "String", "PHOTOSHELF_API_PREFIX", "\"http://10.0.2.2:8080/image/\""

        resConfigs "en"
    }

    // see https://developer.android.com/studio/build/optimize-your-build#use_static_build_properties
    applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.each { output -> output.versionCodeOverride = versionCodeByTask() }
        }
    }

    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "String" , "PHOTOSHELF_API_PREFIX" , "\"https://visualdiffer.com/image/\""
        }
        debug {
            applicationIdSuffix ".debug"
        }
        debugGenymotion {
            initWith debug
            // used with genymotion
            buildConfigField "String", "PHOTOSHELF_API_PREFIX", "\"http://10.0.3.2:8080/image/\""

            // Otherwise compilation fails while importing the modules
            matchingFallbacks = ['debug']
        }
        debugRealDeviceLocal {
            // use from real devices to access to local network
            initWith debug
            buildConfigField "String", "PHOTOSHELF_API_PREFIX", "\"http://192.168.0.13:8080/image/\""

            // Otherwise compilation fails while importing the modules
            matchingFallbacks = ['debug']
        }
        debugRealDeviceProd {
            // use from real devices to access to production env
            initWith debug
            buildConfigField "String" , "PHOTOSHELF_API_PREFIX" , "\"https://visualdiffer.com/image/\""

            // Otherwise compilation fails while importing the modules
            matchingFallbacks = ['debug']
        }
    }

    sourceSets {
        debugGenymotion {
            root = "src/debug"
        }
        debugRealDeviceLocal {
            root = "src/debug"
        }
        debugRealDeviceProd {
            root = "src/debug"
        }
    }
    // Workaround for "Method ... not mocked." in test cases
    testOptions {
        unitTests.returnDefaultValues = true
    }

    // Needed by dropbox
    // see http://stackoverflow.com/questions/31912459/duplicate-lib-file-copied-in-apk-meta-inf-license-txt-error-in-andorid-studio#31912566
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/*.kotlin_module'
    }
}

tasks.withType(JavaCompile) {
    compileTask ->
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}
repositories {
    mavenCentral()
}

def versionCodeByTask() {
    def props = new Properties()
    def versionFile = new File("$rootDir/app/version.properties")
    def versionCode = 1
    if (versionFile.exists()) {
        props.load(new FileReader(versionFile))
        versionCode = props["versionCode"]?.isInteger() ? props["versionCode"].toInteger() : 1
    }

    def versionCodeIncrementProperty = "versionCode.increment"
    def incrementVersion = project.hasProperty(versionCodeIncrementProperty)
            ? "true".equalsIgnoreCase(project.property(versionCodeIncrementProperty)) : true
    if (!incrementVersion) {
        println "Version code will not be incremented, current value $versionCode"
        return versionCode
    }

    // Increment the versionCode only for specific tasks (eg the assemble release tasks)
    def runTasks = gradle.startParameter.taskNames
    def incrementableTaskNames = ["aR", "assembleRelease"]
    if (incrementableTaskNames.any { name -> name in runTasks }) {
        ++versionCode
        props["versionCode"] = versionCode.toString()
        props.store(new FileWriter(versionFile), null)
    }
    return versionCode
}
