import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        minSdkVersion = 26
        targetSdkVersion = 34
        compileSdkVersion = 34

        def runTasks = gradle.startParameter.taskNames
        def releaseTaskNames = ["aR", "assembleRelease", "bundleRelease"]
        if (releaseTaskNames.any { name -> name in runTasks }) {
            println "Skipping preview SDK (if any) for production build"
        } else {
            def localProperties = new Properties()
            localProperties.load(new FileInputStream(rootProject.file("local.properties")))
            def targetSdkVersionDevPreview = localProperties['target.sdk.version.dev.preview']
            def compileSdkVersionDevPreview = localProperties['compile.sdk.version.dev.preview']
            if (targetSdkVersionDevPreview == null || compileSdkVersionDevPreview == null) {
                println "Preview SDK not defined, using SDK version $targetSdkVersion"
            }
            if (targetSdkVersionDevPreview?.trim() && compileSdkVersionDevPreview?.trim()) {
                println "Using preview SDK: $targetSdkVersionDevPreview"
                targetSdkVersion = targetSdkVersionDevPreview
                compileSdkVersion = compileSdkVersionDevPreview
            }
        }
    }
}

plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.android.library) apply false
    alias(libs.plugins.hilt.android) apply false
    alias(libs.plugins.ksp) apply false
    alias(libs.plugins.detekt) apply false
    alias(libs.plugins.versiondependency)
    alias(libs.plugins.graphviz)
}

subprojects {
    apply plugin: "io.gitlab.arturbosch.detekt"

    detekt {
        buildUponDefaultConfig = true
        config = files("${project.rootDir}/config/detekt/detekt.yml")
        parallel = true
    }

    dependencies {
        detektPlugins(libs.detekt.plugin.formatting)
    }

    if (name == "app") {
        apply plugin: "com.android.application"
    } else {
        apply plugin: "com.android.library"
    }
    android {
        lint {
            lintConfig file("${project.rootDir}/config/lint/lint.xml")
        }
        compileOptions {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
        tasks.withType(KotlinCompile).configureEach {
            compilerOptions {
                // -Xjvm-default=all required by coil https://coil-kt.github.io/coil/getting_started/#java-8
                freeCompilerArgs = [
                        '-Xjvm-default=all',
                        "-Xjavac-arguments='-Xlint:unchecked -Xlint:deprecation'"
                ]
                jvmTarget = JvmTarget.JVM_1_8
            }
        }
    }
}
